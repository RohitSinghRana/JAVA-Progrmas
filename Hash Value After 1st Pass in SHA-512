
import java.io.UnsupportedEncodingException;
import java.lang.Math;
import java.math.BigDecimal;
import java.math.MathContext;
public class InitialHashFunction {

	static StringBuilder[] bit = new StringBuilder[8];
	static StringBuilder[] bit1 = new StringBuilder[8];
	static int count = 0;

	
	//Method to Find Initial Hash Value
	static String initial_value(BigDecimal pass_value, int n) {

		BigDecimal num = pass_value;
		BigDecimal fractionalPart , number;
		BigDecimal integralPart;
		BigDecimal q=new BigDecimal(2);
		int k;
		StringBuilder s = new StringBuilder();
		k = 64;

		int n2 = num.intValue();
		BigDecimal n3=BigDecimal.valueOf(n2);
		fractionalPart = num.subtract(n3);
		s = new StringBuilder();
		while (k != 0) {
			
//			integralPart = (BigDecimal) (fractionalPart * 2.0);
			integralPart=fractionalPart.multiply(q);
			int integralPart1=integralPart.intValue();
			s.append(integralPart1);
//			number = fractionalPart * 2;
			number=integralPart;
			BigDecimal q1=new BigDecimal(integralPart1);
			fractionalPart = number.subtract(q1);
			k--;
		}
//		System.out.printn(s);
		StringBuilder binary = s;
		if (count < 8 && n == 1) {
			bit[count] = binary;
			count++;
		}
		if (count <= 2 && n == 0) {
			bit1[count - 1] = binary;
		}
		String r = BinaryToHexa(binary);
		return r;

	}


//	//Method to change Binary to Hexa Decimal
	private static String BinaryToHexa(StringBuilder binary) {
		String s1 = "";
		int digitNumber = 1;
		int sum = 0;
		for (int i = 0; i < binary.length(); i++) {
			if (digitNumber == 1)
				sum += Integer.parseInt(binary.charAt(i) + "") * 8;
			else if (digitNumber == 2)
				sum += Integer.parseInt(binary.charAt(i) + "") * 4;
			else if (digitNumber == 3)
				sum += Integer.parseInt(binary.charAt(i) + "") * 2;
			else if (digitNumber == 4 || i < binary.length() + 1) {
				sum += Integer.parseInt(binary.charAt(i) + "") * 1;
				digitNumber = 0;
				if (sum < 10)
					s1 = s1 + sum;
				else if (sum == 10)
					s1 = s1 + "A";
				else if (sum == 11)
					s1 = s1 + "B";
				else if (sum == 12)
					s1 = s1 + "C";
				else if (sum == 13)
					s1 = s1 + "D";
				else if (sum == 14)
					s1 = s1 + "E";
				else if (sum == 15)
					s1 = s1 + "F";
				sum = 0;
			}
			digitNumber++;
		}

		return s1;
	}
//
	private static String findy() {
		String H = bit[7].toString();

		String cand = condition();
		int x1 = 28;
		int x2 = 34;
		int x3 = 39;
		int n = 4;
		String rot = rotate(x1, x2, x3, 4);
		String key_0 = bit1[0].toString();
		String W0 = bit1[0].toString();
		String add1 = addBinary(H, cand);
		String add2 = addBinary(add1, rot);
		String add3 = addBinary(add2, key_0);
		String add4 = addBinary(add3, W0);

		return add4;
	}
	
	
//	//Method for Condition
	private static String condition() {
		String res = "";
		String res1 = "";
		String r = "";
		String a = bit[4].toString();

		String b = bit[5].toString();

		String c = bit[6].toString();

		for (int i = 0; i < 64; i++) {
			res = res + (char) ((a.charAt(i) - '0' & b.charAt(i) - '0') + '0');
			res1 = res1 + (char) ((~(a.charAt(i) - '0') & c.charAt(i) - '0') + '0');
			r = r + (char) ((res.charAt(i) - '0' ^ res1.charAt(i) - '0') + '0');

		}

		return r;
	}
//
	private static String findx() {
		String maj = majority();

		int x1 = 28;
		int x2 = 34;
		int x3 = 39;
		int n = 0;
		String rot = rotate(x1, x2, x3, n);
		String ADD = addBinary(maj, rot);

		return ADD;
	}
	
	
//	//Method to add two Bianry Number
	static String addBinary(String a, String b) {

		// Initialize result
		String result = "";

		// Initialize digit sum
		int s = 0;

		// Traverse both strings starting
		// from last characters
		int i = a.length() - 1, j = b.length() - 1;
		while (i >= 0 || j >= 0 || s == 1) {

			s += ((i >= 0) ? a.charAt(i) - '0' : 0);
			s += ((j >= 0) ? b.charAt(j) - '0' : 0);

			result = (char) (s % 2 + '0') + result;

			s /= 2;

			i--;
			j--;
		}

		return result;
	}
//
	static String leftrotate(String str, int d) {
		String ans = str.substring(d) + str.substring(0, d);
		return ans;
	}

	// function that rotates s towards right by d
	static String rightrotate(String str, int d) {
		return leftrotate(str, str.length() - d);
	}

	private static String rotate(int x1, int x2, int x3, int n) {
		String a = bit[n].toString();
		String a1 = rightrotate(a, x1);
		String a2 = rightrotate(a, x2);
		String a3 = rightrotate(a, x3);
		String res = "";
		String res1 = "";
		for (int i = 0; i < 64; i++) {
			res = res + (char) ((a1.charAt(i) - '0' ^ a2.charAt(i) - '0') + '0');
			res1 = res1 + (char) ((res.charAt(i) - '0' ^ a3.charAt(i) - '0') + '0');
		}
		return res1;
	}

//	//Method to find Majority 
	private static String majority() {
		String res = "";
		String res1 = "";
		String res2 = "";
		String r = "";
		String r1 = "";
		String a = bit[0].toString();

		String b = bit[1].toString();

		String c = bit[2].toString();

		System.out.println();
		for (int i = 0; i < 64; i++) {
			res = res + (char) ((a.charAt(i) - '0' & b.charAt(i) - '0') + '0');
			res1 = res + (char) ((b.charAt(i) - '0' & c.charAt(i) - '0') + '0');
			r = r + (char) ((res.charAt(i) - '0' ^ res1.charAt(i) - '0') + '0');
			res2 = res2 + (char) ((a.charAt(i) - '0' & c.charAt(i) - '0') + '0');
			r1 = r1 + (char) ((r.charAt(i) - '0' ^ res2.charAt(i) - '0') + '0');

		}

		return r1;
	}

	
	// Main Code Starts From Here
	public static void main(String[] args) throws UnsupportedEncodingException {
		int[] prime = { 2, 3, 5, 7, 11, 13, 17, 19 };
		int alpha = 65;
		String[] Initial = new String[8];
		String[] Initial1 = new String[8];
		
		for (int i = 0; i < prime.length; i++) {
			double v = Math.sqrt(prime[i]);
			
			BigDecimal b1 = new BigDecimal(prime[i]);
			
			MathContext mc = new MathContext(24); // 20 places after decimal
			b1=b1.sqrt(mc);

			int num = 1;
			String IV = initial_value(b1, num);

			BigDecimal b2 = new BigDecimal(prime[i]);
			b2=b2.pow(3, mc);

			int num1 = 0;

			String IV1 = initial_value(b2, num1);
			Initial[i] = IV;
			Initial1[i] = IV1;
		}
		
		for (int i = 0; i < prime.length; i++) {
			double v = Math.sqrt(prime[i]);
			
			BigDecimal b1 = new BigDecimal(prime[i]);
			
			MathContext mc = new MathContext(24); // 20 places after decimal
			b1=b1.sqrt(mc);

			int num = 1;
			String IV = initial_value(b1, num);

			BigDecimal b2 = new BigDecimal(prime[i]);
			b2=b2.sqrt(mc);

			int num1 = 0;

			String IV1 = initial_value(b2, num1);
			Initial[i] = IV;
			Initial1[i] = IV1;
		}

		System.out.println("Initial Hash Values are(8 Words Each Words contain 64 bits) : ");
		for (int i = 0; i < Initial.length; i++) {
			System.out.println((char) (alpha + i) + " --> " + Initial[i]);
		}
		System.out.println();
		String new_s = "";
		for (int i = 0; i < Initial.length; i++) {
			new_s = new_s + Initial[i] + "";
		}
		System.out.println("After Padding All Values Hash Value of 512 bit is : ");
		System.out.println(new_s);
		System.out.println();

		System.out.println("Initial key Value of 64 bit : K-0 ---->    " + Initial1[0]);
		System.out.println();
		System.out.println("Initial World of 64 bit : W-0 ---->    " + Initial1[1]);
		// Getting Hash Value After 1st Pass
		
		
		String[] out = new String[8];
		String x = findx();
		String y = findy();
		x = addBinary(x, y);
		StringBuilder s = new StringBuilder(x);
		x = BinaryToHexa(s);

		y = addBinary(y, bit[3].toString());
		StringBuilder s1 = new StringBuilder(y);
		y = BinaryToHexa(s1);

		out[0] = x;
		out[1] = Initial[0];
		out[2] = Initial[1];
		out[3] = Initial[2];
		out[4] = y;
		out[5] = Initial[4];
		out[6] = Initial[5];
		out[7] = Initial[6];

		System.out.println("Hash Code After First Pass : \n");
		System.out.println("\t'Initial Hash Values'\t\t'Hash Values After 1st Pass' : ");
		for (int i = 0; i < out.length; i++) {
			System.out.println((char) (alpha + i) + "    -->   " + Initial[i] + "     ---->      " + out[i]);
		}

	}

}




//Thank You 

//This Code is contributed by Rohit Singh Rana
//NIT Rourkela
